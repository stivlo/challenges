package arrays.find_duplicate;

import com.google.common.collect.Lists;

import java.util.BitSet;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

public class Solution2 {

    public int repeatedNumber(final List<Integer> a) {
        int fullBucket = findOverFilledBucket(a);
        return findRepeatedNumber(a, fullBucket);
    }

    public int findOverFilledBucket(List<Integer> a) {
        int nBuckets = findBucketCount(a);
        int[] count = new int[nBuckets];
        for (int el : a) {
            int bucket = (el - 1) / nBuckets;
            count[bucket]++;
            if (count[bucket] > nBuckets) return bucket;
        }
        return (a.size() - 2) / nBuckets;
    }

    public int findRepeatedNumber(List<Integer> a, int fullBucket) {
        BitSet nums = new BitSet();
        int nBuckets = findBucketCount(a);
        for (int el : a) {
            int curBucket = (el - 1) / nBuckets;
            if (curBucket == fullBucket) {
                int index = (el - 1) % nBuckets;
                if (nums.get(index)) return el;
                nums.set(index);
            }
        }
        return -1;
    }

    public int findBucketCount(List<Integer> a) {
        return (int) Math.ceil(Math.sqrt(a.size() - 1));
    }

    public static void main(String[] args) {
        assertThat(new Solution2().repeatedNumber(Lists.newArrayList(3, 2, 1, 4, 5, 5)), is(5));
        assertThat(new Solution2().repeatedNumber(Lists.newArrayList(3, 4, 1, 4, 1)), is(4));
        assertThat(new Solution2().repeatedNumber(Lists.newArrayList(8, 1, 2, 3, 4, 5, 6, 7, 7)), is(7));
        assertThat(new Solution2().repeatedNumber(Lists.newArrayList(247, 240, 303, 9, 304, 105, 44, 204, 291,
                26, 242, 2, 358, 264, 176, 289, 196, 329, 189, 102, 45, 111, 115, 339, 74, 200, 34, 201, 215, 173, 107,
                141, 71, 125, 6, 241, 275, 88, 91, 58, 171, 346, 219, 238, 246, 10, 118, 163, 287, 179, 123, 348, 283,
                313, 226, 324, 203, 323, 28, 251, 69, 311, 330, 316, 320, 312, 50, 157, 342, 12, 253, 180, 112, 90, 16,
                288, 213, 273, 57, 243, 42, 168, 55, 144, 131, 38, 317, 194, 355, 254, 202, 351, 62, 80, 134, 321, 31,
                127, 232, 67, 22, 124, 271, 231, 162, 172, 52, 228, 87, 174, 307, 36, 148, 302, 198, 24, 338, 276, 327,
                150, 110, 188, 309, 354, 190, 265, 3, 108, 218, 164, 145, 285, 99, 60, 286, 103, 119, 29, 75, 212, 290,
                301, 151, 17, 147, 94, 138, 272, 279, 222, 315, 116, 262, 1, 334, 41, 54, 208, 139, 332, 89, 18, 233,
                268, 7, 214, 20, 46, 326, 298, 101, 47, 236, 216, 359, 161, 350, 5, 49, 122, 345, 269, 73, 76, 221, 280,
                322, 149, 318, 135, 234, 82, 120, 335, 98, 274, 182, 129, 106, 248, 64, 121, 258, 113, 349, 167, 192,
                356, 51, 166, 77, 297, 39, 305, 260, 14, 63, 165, 85, 224, 19, 27, 177, 344, 33, 259, 292, 100, 43, 314,
                170, 97, 4, 78, 310, 61, 328, 199, 255, 159, 185, 261, 229, 11, 295, 353, 186, 325, 79, 142, 223, 211,
                152, 266, 48, 347, 21, 169, 65, 140, 83, 156, 340, 56, 220, 130, 117, 143, 277, 235, 59, 205, 153, 352,
                300, 114, 84, 183, 333, 230, 197, 336, 244, 195, 37, 23, 206, 86, 15, 187, 181, 308, 109, 293, 128, 66,
                270, 209, 158, 32, 25, 227, 191, 35, 40, 13, 175, 146, 299, 207, 217, 281, 30, 357, 184, 133, 245, 284,
                343, 53, 210, 306, 136, 132, 239, 155, 73, 193, 278, 257, 126, 331, 294, 250, 252, 263, 92, 267, 282,
                72, 95, 337, 154, 319, 341, 70, 81, 68, 160, 8, 249, 96, 104, 137, 256, 93, 178, 296, 225, 237)),
                is(73));
        assertThat(new Solution2().repeatedNumber(Lists.newArrayList(127, 228, 308, 341, 350, 371, 195, 11,
                223, 138, 206, 279, 385, 289, 276, 152, 42, 208, 382, 22, 185, 339, 64, 149, 337, 122, 101, 15, 388,
                205, 160, 35, 277, 240, 201, 302, 335, 336, 61, 236, 320, 200, 85, 44, 287, 164, 50, 366, 202, 301,
                259, 89, 59, 113, 47, 248, 146, 71, 23, 373, 197, 39, 27, 381, 219, 253, 32, 386, 129, 105, 299, 296,
                31, 110, 151, 191, 372, 395, 255, 257, 275, 77, 380, 226, 90, 251, 67, 281, 234, 9, 30, 216, 370, 1,
                88, 107, 10, 368, 80, 119, 34, 325, 82, 328, 54, 319, 233, 66, 229, 209, 135, 98, 192, 331, 21, 125,
                241, 297, 221, 194, 19, 369, 92, 290, 87, 384, 141, 41, 84, 224, 391, 324, 55, 145, 378, 214, 161, 347,
                130, 48, 177, 365, 163, 17, 133, 210, 182, 361, 340, 49, 227, 131, 36, 353, 311, 225, 134, 243, 109,
                115, 176, 284, 315, 26, 330, 262, 156, 304, 309, 323, 99, 108, 167, 343, 144, 148, 392, 118, 81, 37,
                387, 374, 360, 332, 150, 171, 231, 18, 249, 126, 252, 327, 95, 172, 215, 184, 295, 103, 220, 293, 384,
                16, 292, 354, 211, 396, 198, 5, 298, 286, 316, 2, 307, 389, 348, 269, 73, 159, 352, 212, 213, 139, 271,
                52, 264, 28, 65, 8, 45, 40, 283, 3, 102, 246, 94, 181, 186, 305, 43, 303, 322, 199, 14, 143, 168, 280,
                242, 128, 106, 291, 38, 137, 349, 51, 12, 123, 180, 154, 321, 165, 124, 356, 278, 183, 375, 100, 222,
                114, 117, 136, 6, 326, 254, 68, 329, 270, 58, 69, 265, 394, 363, 310, 140, 204, 342, 364, 377, 258, 60,
                261, 78, 312, 317, 196, 170, 20, 190, 33, 70, 238, 142, 333, 178, 346, 112, 96, 232, 235, 357, 285, 155,
                169, 93, 79, 217, 174, 239, 207, 318, 193, 120, 104, 245, 189, 62, 268, 121, 294, 390, 218, 24, 306,
                273, 367, 111, 76, 376, 344, 359, 355, 74, 116, 358, 237, 53, 166, 256, 338, 274, 300, 230, 175, 91, 46,
                362, 147, 351, 72, 75, 97, 7, 345, 266, 263, 393, 25, 282, 244, 250, 83, 379, 57, 63, 314, 272, 86, 288,
                157, 334, 132, 179, 383, 173, 260, 56, 267, 4, 188, 158, 313, 247, 187, 203, 13, 153, 29, 162)),
                is(384));
        assertThat(new Solution2().repeatedNumber(Lists.newArrayList(247, 240, 303, 9, 304, 105, 44, 204, 291,
                26, 242, 2, 358, 264, 176, 289, 196, 329, 189, 102, 45, 111, 115, 339, 74, 200, 34, 201, 215, 173, 107,
                141, 71, 125, 6, 241, 275, 88, 91, 58, 171, 346, 219, 238, 246, 10, 118, 163, 287, 179, 123, 348, 283,
                313, 226, 324, 203, 323, 28, 251, 69, 311, 330, 316, 320, 312, 50, 157, 342, 12, 253, 180, 112, 90, 16,
                288, 213, 273, 57, 243, 42, 168, 55, 144, 131, 38, 317, 194, 355, 254, 202, 351, 62, 80, 134, 321, 31,
                127, 232, 67, 22, 124, 271, 231, 162, 172, 52, 228, 87, 174, 307, 36, 148, 302, 198, 24, 338, 276, 327,
                150, 110, 188, 309, 354, 190, 265, 3, 108, 218, 164, 145, 285, 99, 60, 286, 103, 119, 29, 75, 212, 290,
                301, 151, 17, 147, 94, 138, 272, 279, 222, 315, 116, 262, 1, 334, 41, 54, 208, 139, 332, 89, 18, 233,
                268, 7, 214, 20, 46, 326, 298, 101, 47, 236, 216, 359, 161, 350, 5, 49, 122, 345, 269, 73, 76, 221, 280,
                322, 149, 318, 135, 234, 82, 120, 335, 98, 274, 182, 129, 106, 248, 64, 121, 258, 113, 349, 167, 192,
                356, 51, 166, 77, 297, 39, 305, 260, 14, 63, 165, 85, 224, 19, 27, 177, 344, 33, 259, 292, 100, 43, 314,
                170, 97, 4, 78, 310, 61, 328, 199, 255, 159, 185, 261, 229, 11, 295, 353, 186, 325, 79, 142, 223, 211,
                152, 266, 48, 347, 21, 169, 65, 140, 83, 156, 340, 56, 220, 130, 117, 143, 277, 235, 59, 205, 153, 352,
                300, 114, 84, 183, 333, 230, 197, 336, 244, 195, 37, 23, 206, 86, 15, 187, 181, 308, 109, 293, 128, 66,
                270, 209, 158, 32, 25, 227, 191, 35, 40, 13, 175, 146, 299, 207, 217, 281, 30, 357, 184, 133, 245, 284,
                343, 53, 210, 306, 136, 132, 239, 155, 73, 193, 278, 257, 126, 331, 294, 250, 252, 263, 92, 267, 282,
                72, 95, 337, 154, 319, 341, 70, 81, 68, 160, 8, 249, 96, 104, 137, 256, 93, 178, 296, 225, 237)),
                is(73));
    }

}
